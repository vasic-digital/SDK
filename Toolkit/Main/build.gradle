plugins {

    id 'com.android.library'
    id 'kotlin-android'
    id("com.google.devtools.ksp") version "2.1.10-1.0.31"
}

if ("$toolkit_project_name" == "null" || "$toolkit_project_name".isEmpty() || "$toolkit_project_name".isBlank()) {

    throw new IllegalArgumentException(

            "The 'toolkit_project_name' ext. variable has to be set from the main " +
                    "root project build.gradle file"
    )

} else {

    println("The 'toolkit_project_name' is: '$toolkit_project_name'")
}


import com.redelf.jcommons.JObfuscator

import java.nio.file.Files
import java.nio.file.Paths

/*
     The .zshrc / .bashrc example:

     export OBFUSCATION_SALT="your_secret_salt"

     export PROXY_LOCAL_ENABLED="BOBA;"
     export PROXY_LOCAL_PROD_ENABLED="BOBA;"
     export PROXY_REMOTE_PROD_ENABLED="BOBA;"

     export PROXY_LOCAL_TEST="$(hostname | tr '[:upper:]' '[:lower:]')"
     export PROXY_LOCAL_PROD="milosvasic.local"

     export PROXY_LOCAL_TEST_PORT="8080"
     export PROXY_LOCAL_PROD_PORT="8080"

     export PROXY_LOCAL_TEST_USERNAME="test"
     export PROXY_LOCAL_PROD_USERNAME="admin"

     export PROXY_LOCAL_TEST_PASSWORD="test"
     export PROXY_LOCAL_PROD_PASSWORD="admin"

     export OBFUSCATION_TEST="test"
*/

def test = System.getenv("OBFUSCATION_TEST") ?: ""

def salt = System.getenv("OBFUSCATION_SALT") ?: ""
def obfuscator = new JObfuscator(salt)

def proxyEnabled = (System.getenv("PROXY_LOCAL_ENABLED") ?: "").contains("$toolkit_project_name;")
def proxyProdEnabled = (System.getenv("PROXY_LOCAL_PROD_ENABLED") ?: "").contains("$toolkit_project_name;")
def proxyRemoteProdEnabled = (System.getenv("PROXY_REMOTE_PROD_ENABLED") ?: "").contains("$toolkit_project_name;")

def pLocalTest = System.getenv("PROXY_LOCAL_TEST") ?: "127.0.0.1"
def pLocalTestPort = System.getenv("PROXY_LOCAL_TEST_PORT") ?: "8080"
def pLocalTestUsername = System.getenv("PROXY_LOCAL_TEST_USERNAME") ?: "test"
def pLocalTestPassword = System.getenv("PROXY_LOCAL_TEST_PASSWORD") ?: "test"

def proxyLocalTest = obfuscator.obfuscate(pLocalTest)
def proxyLocalTestPort = obfuscator.obfuscate(pLocalTestPort)
def proxyLocalTestUsername = obfuscator.obfuscate(pLocalTestUsername)
def proxyLocalTestPassword = obfuscator.obfuscate(pLocalTestPassword)

def pLocalProd = System.getenv("PROXY_LOCAL_PROD") ?: "127.0.0.1"
def pLocalProdPort = System.getenv("PROXY_LOCAL_PROD_PORT") ?: "8080"
def pLocalProdUsername = System.getenv("PROXY_LOCAL_PROD_USERNAME") ?: "admin"
def pLocalProdPassword = System.getenv("PROXY_LOCAL_PROD_PASSWORD") ?: "admin"

def proxyLocalProd = obfuscator.obfuscate(pLocalProd)
def proxyLocalProdPort = obfuscator.obfuscate(pLocalProdPort)
def proxyLocalProdUsername = obfuscator.obfuscate(pLocalProdUsername)
def proxyLocalProdPassword = obfuscator.obfuscate(pLocalProdPassword)

def pRemoteProd = System.getenv("PROXY_REMOTE_PROD") ?: "127.0.0.1"
def pRemoteProdPort = System.getenv("PROXY_REMOTE_PROD_PORT") ?: "8080"
def pRemoteProdUsername = System.getenv("PROXY_REMOTE_PROD_USERNAME") ?: "admin"
def pRemoteProdPassword = System.getenv("PROXY_REMOTE_PROD_PASSWORD") ?: "admin"

def proxyRemoteProd = obfuscator.obfuscate(pRemoteProd)
def proxyRemoteProdPort = obfuscator.obfuscate(pRemoteProdPort)
def proxyRemoteProdUsername = obfuscator.obfuscate(pRemoteProdUsername)
def proxyRemoteProdPassword = obfuscator.obfuscate(pRemoteProdPassword)

android {

    compileSdk 35
    namespace 'com.redelf.commons'

    defaultConfig {

        minSdk 28
        targetSdk 35

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        if (proxyEnabled) {

            resValue "string", "ob_proxy_local_test", proxyLocalTest
            resValue "string", "ob_proxy_local_test_port", proxyLocalTestPort
            resValue "string", "ob_proxy_local_test_username", proxyLocalTestUsername
            resValue "string", "ob_proxy_local_test_password", proxyLocalTestPassword
        }

        if (proxyProdEnabled) {

            resValue "string", "ob_proxy_local_prod", proxyLocalProd
            resValue "string", "ob_proxy_local_prod_port", proxyLocalProdPort
            resValue "string", "ob_proxy_local_prod_username", proxyLocalProdUsername
            resValue "string", "ob_proxy_local_prod_password", proxyLocalProdPassword
        }

        if (proxyRemoteProdEnabled) {

            resValue "string", "ob_proxy_remote_prod", proxyRemoteProd
            resValue "string", "ob_proxy_remote_prod_port", proxyRemoteProdPort
            resValue "string", "ob_proxy_remote_prod_username", proxyRemoteProdUsername
            resValue "string", "ob_proxy_remote_prod_password", proxyRemoteProdPassword
        }

        resValue "string", "ob_test", obfuscator.obfuscate(test)

        multiDexEnabled true

        sourceSets {

            main {

                java.srcDirs += "build/generated/ksp"
            }
        }
    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {

        jvmTarget = '1.8'
    }

    buildTypes {

        release {

            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'missing_rules.txt'
        }

        debug {

            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'missing_rules.txt'
        }
    }

    packagingOptions {

        resources {

            excludes += ['META-INF/*, LICENSE-2.0.txt, META-INF/DEPENDENCIES', 'META-INF/LICENSE',
                         'META-INF/LICENSE.txt', 'META-INF/license.txt', 'META-INF/NOTICE',
                         'META-INF/NOTICE.txt', 'META-INF/notice.txt', 'META-INF/ASL2.0',
                         'META-INF/*.kotlin_module', 'META-INF/*', 'LICENSE-2.0.txt',
                         'META-INF/DEPENDENCIES', 'META-INF/LICENSE', 'META-INF/LICENSE.txt',
                         'META-INF/NOTICE', 'META-INF/NOTICE.txt', 'META-INF/USE_EXACT_ALARM']
        }

        jniLibs {

            excludes += ['META-INF/*']
        }
    }

    lint {

        disable "Instantiatable"
        disable 'ContentDescription'
    }

    sourceSets {

        main {

            java.srcDirs += "build/generated/ksp"
        }
    }
}

dependencies {

    final String okioVersion = "3.9.0"
    final String okHttpVersion = "4.12.0"
    final String jacksonVersion = "2.12.5"
    final String lifecycleVersion = "2.8.7"
    final String retrofitHttpVersion = "2.11.0"

    api project("$toolkit_obfuscator_project")
    testApi project("$toolkit_obfuscator_project")
    androidTestApi project("$toolkit_obfuscator_project")

    // TODO: Refactor / move:
    //    api 'androidx.activity:activity-compose:1.10.0'
    //    api 'androidx.compose.ui:ui'
    //    api 'androidx.compose.ui:ui-graphics'
    //    api 'androidx.compose.material3:material3'
    //    api 'androidx.compose.foundation:foundation'
    //    api 'androidx.compose.ui:ui-tooling-preview'

    api "com.squareup.okio:okio:$okioVersion"
    api "com.squareup.okhttp3:okhttp:$okHttpVersion"
    api "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    api "com.squareup.okhttp3:okhttp:$okHttpVersion"
    api "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    api "com.squareup.retrofit2:retrofit:$retrofitHttpVersion"
    api "com.squareup.retrofit2:converter-scalars:$retrofitHttpVersion"
    api "com.squareup.retrofit2:converter-gson:$retrofitHttpVersion"
    api "com.squareup.retrofit2:converter-jackson:$retrofitHttpVersion"
    api "com.squareup.retrofit2:adapter-rxjava2:$retrofitHttpVersion"

    api "androidx.core:core-ktx:1.15.0"

    api "org.jetbrains.kotlin:kotlin-stdlib:2.0.21"
    api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0"

    api "com.google.firebase:firebase-core:21.1.1"
    api "com.google.firebase:firebase-auth:23.2.0"
    api "com.google.firebase:firebase-config:22.1.0"
    api "com.google.firebase:firebase-analytics:22.2.0"
    api "com.google.firebase:firebase-analytics-ktx:22.2.0"
    api "com.google.firebase:firebase-messaging:24.1.0"
    api "com.google.firebase:firebase-crashlytics:19.4.0"
    api "com.google.android.gms:play-services-auth:21.3.0"

    api "com.google.android.play:app-update:2.1.0"
    api "com.google.android.play:app-update-ktx:2.1.0"

    api "androidx.appcompat:appcompat:1.7.0"
    api "androidx.constraintlayout:constraintlayout:2.2.0"
    api "androidx.coordinatorlayout:coordinatorlayout:1.2.0"
    api "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    api "androidx.lifecycle:lifecycle-extensions:2.2.0"
    api "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-process:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"

    api "androidx.profileinstaller:profileinstaller:1.4.1"
    api "androidx.activity:activity-ktx:1.10.0"

    api "com.github.bumptech.glide:glide:4.16.0"
    api "com.github.bumptech.glide:annotations:4.16.0"

    api "jp.wasabeef:glide-transformations:4.3.0"

    api "net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:3.0.0-RC3"

    api "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"

    api "io.github.nefilim.kjwt:kjwt-core:0.9.0"
    api "io.github.nefilim.kjwt:kjwt-jwks:0.9.0"

    api "com.airbnb.android:lottie:5.2.0"
    api "androidx.work:work-runtime-ktx:2.10.0"
    api "androidx.preference:preference-ktx:1.2.1"
    api "com.google.android.material:material:1.12.0"
    api "androidx.navigation:navigation-ui-ktx:2.8.7"
    api "androidx.navigation:navigation-fragment-ktx:2.8.7"
    api "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"

    api "com.google.net.cronet:cronet-okhttp:0.1.0"
    api "com.google.android.gms:play-services-cronet:18.1.0"

    api "com.android.installreferrer:installreferrer:2.2"
    api "com.facebook.android:facebook-android-sdk:18.0.2"

    api platform("com.google.firebase:firebase-bom:33.9.0")

    // TODO: Refactor / move:
    //    api platform('androidx.compose:compose-bom:2025.01.01')

    testImplementation project("${toolkit_context}:Test")

    androidTestImplementation project("${toolkit_context}:Test")
    androidTestImplementation "androidx.test:rules:1.6.1"
    androidTestImplementation "androidx.test.ext:junit:1.2.1"

    implementation "com.jakewharton.timber:timber:5.0.1"
    testImplementation "com.jakewharton.timber:timber:5.0.1"
    androidTestImplementation "com.jakewharton.timber:timber:5.0.1"

    api "com.google.code.gson:gson:2.11.0"
    testApi "com.google.code.gson:gson:2.11.0"
    androidTestApi "com.google.code.gson:gson:2.11.0"

    api "com.facebook.conceal:conceal:1.1.3@aar"
    testApi "com.facebook.conceal:conceal:1.1.3@aar"
    androidTestApi "com.facebook.conceal:conceal:1.1.3@aar"

    api "org.apache.commons:commons-compress:1.27.1"
    testApi "org.apache.commons:commons-compress:1.27.1"
    androidTestApi "org.apache.commons:commons-compress:1.27.1"

    api "commons-codec:commons-codec:1.17.1"
    testApi "commons-codec:commons-codec:1.17.1"
    androidTestApi "commons-codec:commons-codec:1.17.1"

    testApi "junit:junit:4.13.2"
    androidTestApi "junit:junit:4.13.2"

    androidTestApi 'androidx.test:runner:1.6.2'
    androidTestApi 'androidx.test.espresso:espresso-core:3.6.1'

}

task downloadProxies(type: Exec) {

    def outputDir = file("$projectDir/src/main/res/raw")
    def outputFile = file("$outputDir/proxies.txt")

    doFirst {

        if (!outputDir.exists()) {

            outputDir.mkdirs()
        }
    }

    commandLine 'curl', '-sL', 'https://raw.githubusercontent.com/proxifly/free-proxy-list/main/proxies/protocols/http/data.txt', '-o', outputFile
}

/*
    Generate proxies_local.txt file with local test and prod proxies.

    This task is intended to be executed locally and will create a new file named "proxies_local.txt"
    in the "src/androidTest/res/raw" directory.
    The content of this file will be the concatenation of local test and prod proxies, if enabled.
    Generated entries are created based on the values from the dev. environment (variables).
    We could have the following proxy entries:

    - Localhost dev (current dev. machine)
    - Localhost prod (current dev. machine)
    - Remote prod (external machine, exposed or entirely dedicated remote server)
*/
task generateProxiesLocalTxt {
    doLast {

        def content = ""

        if (proxyEnabled) {

            content = "http://${pLocalTestUsername}:${pLocalTestPassword}@${pLocalTest}:${pLocalTestPort}".stripIndent().trim()
        }

        if (proxyProdEnabled) {

            content = """http://${pLocalTestUsername}:${pLocalTestPassword}@${pLocalTest}:${pLocalTestPort}
http://${pLocalProdUsername}:${pLocalProdPassword}@${pLocalProd}:${pLocalProdPort}
""".stripIndent().trim()
        }

        if (proxyEnabled || proxyProdEnabled) {

            def filePath = "${projectDir}/src/androidTest/res/raw/proxies_local.txt"

            Files.write(Paths.get(filePath), content.getBytes())
            println "Generated proxies_local.txt at: ${filePath}"

            exec {

                commandLine 'git', 'add', filePath
            }

            try {

                exec {

                    commandLine 'git', 'commit', '-m', 'Auto-generated proxies_local.txt'
                }

            } catch (Exception e) {

                println "Git commit command failed: ${e.message}"
            }

            try {

                exec {

                    commandLine 'git', 'push'
                }

            } catch (Exception e) {

                println "Git push command failed: ${e.message}"
            }
        }
    }
}

task startLocalProxyServer {
    doLast {

        try {

            exec {

                commandLine 'sh', "${rootDir}/Toolkit/Scripts/start_local_proxy_server.sh", "${rootDir}/Toolkit/Squid"
            }

        } catch (Exception e) {

            println "Shell script execution failed: ${e.message}"
        }
    }
}

task obtainAndWriteSalt {
    doLast {

        if (!salt.isEmpty() && !salt.isBlank()) {

            def content = "${salt}"
            def filePath = "${getRootDir()}/salt.txt"

            Files.write(Paths.get(filePath), content.getBytes())

            println "Generated salt.txt at: ${filePath}"

        } else {

            println "No salt.txt was generated"
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

preBuild.dependsOn obtainAndWriteSalt

if (proxyEnabled) {

    preBuild.dependsOn downloadProxies
}

if (proxyEnabled || proxyProdEnabled) {

    preBuild.dependsOn generateProxiesLocalTxt
}

if (proxyEnabled) {

    preBuild.dependsOn startLocalProxyServer
}

